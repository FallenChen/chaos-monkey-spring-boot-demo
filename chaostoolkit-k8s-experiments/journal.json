{
  "chaoslib-version": "1.0.0",
  "platform": "Darwin-18.2.0-x86_64-i386-64bit",
  "node": "somni-pro",
  "experiment": {
    "version": "1.0.0",
    "title": "Pod should be automatically killed and restarted when unhealthy",
    "description": "Can we trust Kubernetes to restart our microservice when it detects it is unhealthy?",
    "tags": [
      "microservice",
      "kubernetes",
      "python"
    ],
    "steady-state-hypothesis": {
      "title": "Services are all available and healthy",
      "probes": [
        {
          "type": "probe",
          "name": "all-services-are-healthy",
          "tolerance": true,
          "provider": {
            "type": "python",
            "module": "chaosk8s.probes",
            "func": "all_microservices_healthy",
            "arguments": {
              "ns": "shoppingdemo"
            }
          }
        },
        {
          "type": "probe",
          "name": "gateway-is-available",
          "tolerance": true,
          "provider": {
            "type": "python",
            "module": "chaosk8s.probes",
            "func": "microservice_available_and_healthy",
            "arguments": {
              "name": "gateway",
              "ns": "shoppingdemo",
              "label_selector": "app=shoppingdemo"
            }
          }
        }
      ]
    },
    "method": [
      {
        "type": "action",
        "name": "talk-to-gateway",
        "background": true,
        "provider": {
          "type": "process",
          "path": "vegeta",
          "timeout": 63,
          "arguments": {
            "attack": "",
            "-duration": "60s",
            "-connections": "1",
            "-rate": "1",
            "-output": "report.bin",
            "-targets": "urls.txt"
          }
        }
      },
      {
        "type": "probe",
        "name": "read-gateway-logs-for-the-pod-that-was-killed",
        "provider": {
          "type": "python",
          "module": "chaosk8s.probes",
          "func": "read_microservices_logs",
          "arguments": {
            "name": "gateway",
            "from_previous": true
          }
        }
      },
      {
        "type": "probe",
        "name": "read-gateway-logs-for-pod-that-was-started",
        "provider": {
          "type": "python",
          "module": "chaosk8s.probes",
          "func": "read_microservices_logs",
          "arguments": {
            "name": "gateway"
          }
        }
      },
      {
        "type": "probe",
        "name": "plot-request-latency-throughout-experiment",
        "provider": {
          "type": "process",
          "path": "vegeta",
          "timeout": 5,
          "arguments": {
            "report": "",
            "-inputs": "report.bin",
            "-reporter": "plot",
            "-output": "latency.html"
          }
        },
        "pauses": {
          "before": 5
        }
      }
    ],
    "rollbacks": [],
    "dry": false
  },
  "start": "2019-02-25T15:46:54.566739",
  "status": "failed",
  "deviated": true,
  "steady_states": {
    "before": {
      "steady_state_met": true,
      "probes": [
        {
          "activity": {
            "type": "probe",
            "name": "all-services-are-healthy",
            "tolerance": true,
            "provider": {
              "type": "python",
              "module": "chaosk8s.probes",
              "func": "all_microservices_healthy",
              "arguments": {
                "ns": "shoppingdemo"
              }
            }
          },
          "output": true,
          "status": "succeeded",
          "start": "2019-02-25T15:46:54.567536",
          "end": "2019-02-25T15:46:54.694777",
          "duration": 0.127241,
          "tolerance_met": true
        },
        {
          "activity": {
            "type": "probe",
            "name": "gateway-is-available",
            "tolerance": true,
            "provider": {
              "type": "python",
              "module": "chaosk8s.probes",
              "func": "microservice_available_and_healthy",
              "arguments": {
                "name": "gateway",
                "ns": "shoppingdemo",
                "label_selector": "app=shoppingdemo"
              }
            }
          },
          "output": true,
          "status": "succeeded",
          "start": "2019-02-25T15:46:54.695046",
          "end": "2019-02-25T15:46:54.808800",
          "duration": 0.113754,
          "tolerance_met": true
        }
      ]
    },
    "after": {
      "steady_state_met": false,
      "probes": [
        {
          "activity": {
            "type": "probe",
            "name": "all-services-are-healthy",
            "tolerance": true,
            "provider": {
              "type": "python",
              "module": "chaosk8s.probes",
              "func": "all_microservices_healthy",
              "arguments": {
                "ns": "shoppingdemo"
              }
            }
          },
          "output": true,
          "status": "succeeded",
          "start": "2019-02-25T15:47:53.846703",
          "end": "2019-02-25T15:47:53.961635",
          "duration": 0.114932,
          "tolerance_met": true
        },
        {
          "activity": {
            "type": "probe",
            "name": "gateway-is-available",
            "tolerance": true,
            "provider": {
              "type": "python",
              "module": "chaosk8s.probes",
              "func": "microservice_available_and_healthy",
              "arguments": {
                "name": "gateway",
                "ns": "shoppingdemo",
                "label_selector": "app=shoppingdemo"
              }
            }
          },
          "output": null,
          "status": "failed",
          "exception": [
            "Traceback (most recent call last):\n",
            "  File \"/Users/benjaminwilms/.venvs/chaostk/lib/python3.7/site-packages/chaoslib/provider/python.py\", line 55, in run_python_activity\n    return func(**arguments)\n",
            "  File \"/Users/benjaminwilms/.venvs/chaostk/lib/python3.7/site-packages/chaosk8s/probes.py\", line 83, in microservice_available_and_healthy\n    \"microservice '{name}' is not healthy\".format(name=name))\n",
            "chaoslib.exceptions.ActivityFailed: microservice 'gateway' is not healthy\n",
            "\nDuring handling of the above exception, another exception occurred:\n\n",
            "chaoslib.exceptions.ActivityFailed: chaoslib.exceptions.ActivityFailed: microservice 'gateway' is not healthy\n"
          ],
          "start": "2019-02-25T15:47:53.961884",
          "end": "2019-02-25T15:47:54.078957",
          "duration": 0.117073,
          "tolerance_met": false
        }
      ]
    }
  },
  "run": [
    {
      "activity": {
        "type": "action",
        "name": "talk-to-gateway",
        "background": true,
        "provider": {
          "type": "process",
          "path": "vegeta",
          "timeout": 63,
          "arguments": {
            "attack": "",
            "-duration": "60s",
            "-connections": "1",
            "-rate": "1",
            "-output": "report.bin",
            "-targets": "urls.txt"
          }
        }
      },
      "output": {
        "status": 0,
        "stdout": "",
        "stderr": ""
      },
      "status": "succeeded",
      "start": "2019-02-25T15:46:54.809650",
      "end": "2019-02-25T15:47:53.846097",
      "duration": 59.036447
    },
    {
      "activity": {
        "type": "probe",
        "name": "read-gateway-logs-for-the-pod-that-was-killed",
        "provider": {
          "type": "python",
          "module": "chaosk8s.probes",
          "func": "read_microservices_logs",
          "arguments": {
            "name": "gateway",
            "from_previous": true
          }
        }
      },
      "output": {},
      "status": "succeeded",
      "start": "2019-02-25T15:46:54.809860",
      "end": "2019-02-25T15:46:54.930879",
      "duration": 0.121019
    },
    {
      "activity": {
        "type": "probe",
        "name": "read-gateway-logs-for-pod-that-was-started",
        "provider": {
          "type": "python",
          "module": "chaosk8s.probes",
          "func": "read_microservices_logs",
          "arguments": {
            "name": "gateway"
          }
        }
      },
      "output": {},
      "status": "succeeded",
      "start": "2019-02-25T15:46:54.931084",
      "end": "2019-02-25T15:46:55.048444",
      "duration": 0.11736
    },
    {
      "activity": {
        "type": "probe",
        "name": "plot-request-latency-throughout-experiment",
        "provider": {
          "type": "process",
          "path": "vegeta",
          "timeout": 5,
          "arguments": {
            "report": "",
            "-inputs": "report.bin",
            "-reporter": "plot",
            "-output": "latency.html"
          }
        },
        "pauses": {
          "before": 5
        }
      },
      "output": {
        "status": 2,
        "stdout": "",
        "stderr": "flag provided but not defined: -inputs\nUsage: vegeta report [options] [<file>...]\n\nOutputs a report of attack results.\n\nArguments:\n  <file>  A file with vegeta attack results encoded with one of\n          the supported encodings (gob | json | csv) [default: stdin]\n\nOptions:\n  --type    Which report type to generate (text | json | hist[buckets]).\n            [default: text]\n\n  --every   Write the report to --output at every given interval (e.g 100ms)\n            The default of 0 means the report will only be written after\n            all results have been processed. [default: 0]\n\n  --output  Output file [default: stdout]\n\nExamples:\n  echo \"GET http://:80\" | vegeta attack -rate=10/s > results.gob\n  echo \"GET http://:80\" | vegeta attack -rate=100/s | vegeta encode > results.json\n  vegeta report results.*\n\n"
      },
      "status": "succeeded",
      "start": "2019-02-25T15:47:00.049009",
      "end": "2019-02-25T15:47:00.060911",
      "duration": 0.011902
    }
  ],
  "rollbacks": [],
  "end": "2019-02-25T15:47:54.079641",
  "duration": 59.53696322441101
}